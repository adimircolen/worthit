{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","state","type","total","useful","value","calendar","val","this","setState","e","_this2","target","update","_this3","react_default","a","createElement","className","href","rel","onChange","changeType","name","checked","currency_format_default","decimalSeparator","thousandSeparator","fixedDecimalScale","decimalScale","isNumericString","prefix","placeholder","onValueChange","values","parseInt","toString","replace","displayType","renderText","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.744b391d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport CurrencyFormat from \"react-currency-format\";\n\nclass App extends Component {\n  state = {\n    type: 'diário',\n    total: 0,\n    useful: 0,\n    value: 0\n  };\n\n  calendar = {\n    total: 365,\n    useful: 252\n  };\n\n  update() {\n    let val = this.state.value\n    this.setState({ total: 0 })\n    this.setState({\n      total: this.state.type === \"diário\" ? (val * this.calendar.total) / 100 : (val * 12) / 100,\n      useful: (val * this.calendar.useful) / 100,\n    });\n  } \n\n  changeType(e) {\n    this.setState({ type: e.target.value }, () => {\n      this.update();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <section className=\"hero is-info is-bold has-text-centered\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">Vale a pena?</h1>\n              <h2 className=\"subtitle\">Calcule o preço anual de um item e economize dinheiro</h2>\n              <a href=\"https://github.com/lhcgoncalves/worthit\" target=\"_blank\" rel=\"noopener noreferrer\">Deixe sua ★ no GitHub</a>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"section\">\n          <div className=\"container-fluid has-text-centered\">\n            <div className=\"field\">\n              <div className=\"control\">\n                <input type=\"radio\" onChange={(e) => this.changeType(e)} name=\"type\" value=\"diário\" checked={this.state.type === \"diário\"}  /> Diário{\" \"}\n                <input type=\"radio\" onChange={(e) => this.changeType(e)} name=\"type\" value=\"mensal\" checked={this.state.type === \"mensal\"}  /> Mensal\n              </div>\n            </div>          \n            <div className=\"field\">\n              <div className=\"control\">\n                <CurrencyFormat\n                  decimalSeparator={\",\"}\n                  thousandSeparator={\".\"}\n                  fixedDecimalScale={true}\n                  decimalScale={2}\n                  isNumericString={true}\n                  prefix={\"R$ \"}\n                  className=\"input is-large has-text-centered\"\n                  placeholder=\"R$ 0,00\"\n                  onValueChange={values => {\n                    const { value } = values;\n                    let val = parseInt(value.toString().replace(\".\", \"\"));\n                    this.setState({ value: val }, () => { this.update() } )\n                  }}\n                />\n              </div>\n            </div>\n            {this.state.total > 0 && (\n              <div>\n                <p>Seu custo anual com esse item {this.state.type} é de:</p>\n                <div className=\"box\">\n                  Por ano:\n                  <CurrencyFormat\n                    value={this.state.total}\n                    displayType={\"text\"}\n                    decimalSeparator={\",\"}\n                    fixedDecimalScale={true}\n                    decimalScale={2}\n                    thousandSeparator={\".\"}\n                    prefix={\"R$ \"}\n                    renderText={value => <h2 className=\"title\">{value}</h2>}\n                  />\n                </div>\n\n                {this.state.type === \"diário\" && (\n                <div className=\"box\">\n                  Em dias úteis:\n                  <CurrencyFormat\n                    value={this.state.useful}\n                    displayType={\"text\"}\n                    decimalSeparator={\",\"}\n                    fixedDecimalScale={true}\n                    decimalScale={2}\n                    thousandSeparator={\".\"}\n                    prefix={\"R$ \"}\n                    renderText={value => <h2 className=\"title\">{value}</h2>}\n                  />\n                </div>\n                )}\n              </div>\n            )}\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}